traverseAndRunCb = (arr, cb) => { //WARNING see note below
      let ds = [...arr]; //WARNING see note below
      let loops = ds.length;

      for(let i = 0; i < loops; i++){
        const node = ds[i];
        const hasChildren = node && node.values && node.values.length > 0;
        if(hasChildren){
          ds = [...ds, ...node.values];
          loops = loops + node.values.length;
        }

        if(node) cb(node);
      }

      this.setState({dataSource: arr});
      //WARNING this works because arr is being assigned to ds, which is then used to store the 'state' of the for loop (the children nodes). we cannot pass ds to set state because it will have child values from bfs. we pass arr to the set state because the reference pass on line 2 allows the object's values to be 'indirectly' updated by the cb() (eg node.val = true)
    }
